var searchIndex = JSON.parse('{\
"eiffelvis":{"doc":"","t":[5],"n":["main"],"q":["eiffelvis"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"eiffelvis_gen":{"doc":"A library for generating mock eiffel events that actually …","t":[0,0,3,3,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["event_set","generator","Event","EventBorrow","EventSet","EventSetBuilder","Link","LinkBorrow","LinkTargets","add_event","add_event_set","add_link","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","events","fmt","fmt","fmt","from","from","from","from","from","from","from","get_event","get_link","into","into","into","into","into","into","link","link_count","links","multiple_allowed","name","name","new","new","new","targets","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","vzip","with_link","with_req_link","with_target","EventGenerator","Iter","borrow","borrow","borrow_mut","borrow_mut","default","from","from","into","into","into_iter","iter","new","next","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["eiffelvis_gen","","eiffelvis_gen::event_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eiffelvis_gen::generator","","","","","","","","","","","","","","","","","","","","","",""],"d":["Types that are used to describe Events.","Generator that stamps out events.","Describes and Eiffel Event. Note: as of yet, the <code>data</code> …","Proxy type that represents a borrowed Event obtained from …","EventSet allows you to describe the types of eiffel …","Provides a way to construct the otherwise non …","Describes an Event link","Proxy type that represents a borrowed Link obtained from …","Represents the 2 states of what a Link can target, either …","Adds an Event to the event set. Note: Event names are …","Adds an existing event set, this is useful when want to …","Adds a Link to the event set. Note: Link names are …","","","","","","","","","","","","","Gives quick access to EventSetBuilder.","Consumes the builder and returns a EventSet. Fails if an …","","","","","","","","","","","","","Provides an iterator over the events present in this set.","","","","","","","","","","","Returns the Event that matches the given name.","Returns the Link that matches the given name.","","","","","","","","","Returns an iterator over the links of this event.","","","","Creates a new Link with given name. <code>allow_many</code> hints to …","Creates a new Event with given name and version, see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builder function that adds a non required link by name to …","Builder function that adds a <strong>required</strong> link by name to …","Builder function that adds a target to self.","Holds on to all the data needed to generate a infinite …","","","","","","","","","","","","Creates a new <strong>infinite</strong> event iterator. Every Iter made …","Constructs a new EventGenerator,","Yields a new event, fails if no events could be created …","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,2,3,4,1,5,6,2,3,4,1,5,6,2,1,3,4,5,6,3,4,5,6,2,3,4,1,2,2,3,4,2,3,3,4,1,5,6,2,2,2,3,4,1,5,6,5,5,5,6,5,6,3,4,1,6,3,4,5,6,2,3,4,1,5,6,2,3,4,1,5,6,2,3,4,1,5,6,5,2,3,4,1,5,6,4,4,3,0,0,7,8,7,8,7,7,8,7,8,8,7,7,8,7,8,7,8,7,8,7,8],"f":[null,null,null,null,null,null,null,null,null,[[["event",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eventsetbuilder",3]],[[],[["option",4,["eventset"]],["eventset",3]]],[[],["link",3]],[[],["event",3]],[[],["eventborrow",3]],[[],["linkborrow",3]],[[]],[[]],[[]],[[]],[[],["eventset",3]],[[]],[[],["event",3]],[[],["eventsetbuilder",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["option",4,["eventborrow"]],["eventborrow",3]]],[[["str",15]],[["linkborrow",3],["option",4,["linkborrow"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["linkborrow",3],["option",4,["linkborrow"]]]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["str",15]],[[],["str",15]],[[["bool",15]]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[["usize",15],["eventset",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"EventSetBuilder"],[3,"EventSet"],[3,"Link"],[3,"Event"],[3,"EventBorrow"],[3,"LinkBorrow"],[3,"EventGenerator"],[3,"Iter"]]},\
"event_sender":{"doc":"","t":[3,5,11,11,11,12,12,11,11,11,5,12,12,11,11,11,12,11],"n":["Cli","app","borrow","borrow_mut","clap","count","exchange","from","from_clap","into","main","routing_key","seed","try_from","try_into","type_id","url","vzip"],"q":["event_sender","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[],["app",3]],null,null,[[]],[[["argmatches",3]]],[[]],[[],["result",6]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]]],"p":[[3,"Cli"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};